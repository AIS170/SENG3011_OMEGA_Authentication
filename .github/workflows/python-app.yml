# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: pipeline
      DYNAMODB_TABLE: ${{ secrets.DYNAMO_DB }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AAKASH_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AAKASH_SECRET_ACCESS_KEY }}
      CLIENT_ROLE_ARN: ${{ secrets.CLIENT_ROLE_ARN_1 }}:${{ secrets.CLIENT_ROLE_ARN_2 }}:${{ secrets.CLIENT_ROLE_ARN_3 }}::${{ secrets.CLIENT_ROLE_ARN_4 }}:${{ secrets.CLIENT_ROLE_ARN_5 }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Set ENVIRONMENT variable
      run: echo "ENVIRONMENT=pipeline" >> $GITHUB_ENV
    - name: Lint and format check
      run: |
        ruff format . --check
        ruff check .
    - name: Run tests with coverage
      run: |
        coverage run --source . --omit=src/app.py -m pytest --junitxml=test-results.xml
        coverage report -m --fail-under=85
        coverage xml -o coverage.xml
        coverage html -d coverage_html_report
    - name: Install JUnit2HTML
      run: pip install junit2html
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-report
        path: test-results.xml
    - name: Coverage XML Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-file-xml
        path: coverage.xml
    - name: Coverage HTML Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-file-html
        path: coverage_html_report/
    - name: Publish
      uses: dorny/test-reporter@v1
      with:
        name: Pytest Results
        path: test-results.xml
        reporter: java-junit
    - name: Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_complexity: true
        indicators: true
        output: both
    - name: Install tools for PDF generation
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc wkhtmltopdf
    - name: Generate Test Report PDF
      run: |
        junit2html test-results.xml test-report.html
        wkhtmltopdf test-report.html test-report.pdf
    - name: Generate PDF coverage summary
      run: |
        echo "# Coverage Report" > coverage-summary.md
        echo "" >> coverage-summary.md
        echo '```' >> coverage-summary.md
        coverage report -m >> coverage-summary.md
        echo '```' >> coverage-summary.md
        pandoc coverage-summary.md -o coverage-summary.pdf --pdf-engine=wkhtmltopdf
    - name: Upload Test Summary PDF
      uses: actions/upload-artifact@v4
      with:
        name: junit-test-report
        path: test-report.pdf